{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/Todolist.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","state","text","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","props","onSubmit","id","uuidv4","complete","Fragment","this","className","onChange","placeholder","onClick","React","Component","library","add","faCheck","faTrash","todo","toggleComplete","icon","onDelete","TodoList","todos","addTodo","newTodos","console","log","map","handleDeleteTodo","filter","removeAllTodoThatAreComplete","Todo","key","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8RAKqBA,E,4MACjBC,MAAQ,CACJC,KAAM,I,EAGVC,aAAa,SAACC,GACV,EAAKC,SAAL,eACKD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,S,EAK1CC,aAAe,SAACL,GACZA,EAAMM,iBACN,EAAKC,MAAMC,SAAS,CAChBC,GAAIC,cACJZ,KAAM,EAAKD,MAAMC,KACjBa,UAAU,IAEd,EAAKV,SAAS,CACVH,KAAM,M,uDAKV,OACI,kBAAC,IAAMc,SAAP,KACI,0BAAMJ,SAAUK,KAAKR,aAAcS,UAAU,aACzC,2BACIX,KAAK,OACLC,MAAOS,KAAKhB,MAAMC,KAClBiB,SAAUF,KAAKd,aACfiB,YAAY,YAEhB,4BAAQF,UAAU,MAAMG,QAASJ,KAAKR,cAAtC,a,GAlCkBa,IAAMC,W,sBCE5CC,IAAQC,IAAIC,KACZF,IAAQC,IAAIE,KAIG,eAAChB,GAAD,OACX,yBAAKO,UAAYP,EAAMiB,KAAKb,SAAW,cAAgB,aACnD,2BACKJ,EAAMiB,KAAK1B,MAGhB,yBAAKgB,UAAU,gBAEf,0BAAMG,QAASV,EAAMkB,gBAClB,kBAAC,IAAD,CAAiBC,KAAK,WAGzB,0BAAMT,QAASV,EAAMoB,SAAUb,UAAU,SACrC,kBAAC,IAAD,CAAiBY,KAAK,cCnBbE,E,4MACjB/B,MAAM,CACFgC,MAAO,I,EAGXC,QAAU,SAACN,GACP,IAAMO,EAAQ,CAAIP,GAAJ,mBAAa,EAAK3B,MAAMgC,QACtCG,QAAQC,IAAIF,GACZ,EAAK9B,SAAS,CACV4B,MAAOE,K,EAIfN,eAAiB,SAAChB,GACd,EAAKR,SAAS,CACV4B,MAAO,EAAKhC,MAAMgC,MAAMK,KAAI,SAAAV,GACxB,OAAIA,EAAKf,KAAOA,EACL,eACAe,EADP,CAIIb,UAAWa,EAAKb,WAGba,Q,EAMvBW,iBAAmB,SAAC1B,GAChB,EAAKR,SAAS,CACV4B,MAAO,EAAKhC,MAAMgC,MAAMO,QAAO,SAAAZ,GAAI,OAAIA,EAAKf,KAAMA,Q,EAI1D4B,6BAA+B,WAC3B,EAAKpC,SAAS,CACV4B,MAAO,EAAKhC,MAAMgC,MAAMO,QAAO,SAAAZ,GAAI,OAAKA,EAAKb,e,uDAI5C,IAAD,OACJ,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,EAAD,CAAUJ,SAAUK,KAAKiB,UACxBjB,KAAKhB,MAAMgC,MAAMK,KAAI,SAAAV,GAAI,OACtB,kBAACc,EAAD,CAAMC,IAAKf,EAAKf,GACVe,KAAMA,EACNC,eAAgB,kBAAI,EAAKA,eAAeD,EAAKf,KAC7CkB,SAAU,kBAAK,EAAKQ,iBAAiBX,EAAKf,UAGpD,yBAAKK,UAAU,gBACX,4CACiBD,KAAKhB,MAAMgC,MAAMO,QAAO,SAAAZ,GAAI,OAAKA,EAAKb,YAAU6B,QAIhE3B,KAAKhB,MAAMgC,MAAMO,QAAO,SAAAZ,GAAI,OAAIA,EAAKb,YAAU6B,OAC5C,6BACI,4BAAQ1B,UAAU,MACdG,QAASJ,KAAKwB,8BADlB,8BAKL,W,GAlEenB,IAAMC,WCO7BsB,MATf,WACE,OACE,yBAAK3B,UAAU,OAEd,kBAAC,EAAD,QCIe4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.e9fcd3c6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport \"../App.css\";\r\n\r\n\r\nexport default class TodoForm extends React.Component{\r\n    state = {\r\n        text: \"\"\r\n    };\r\n\r\n    handleChange=(event)=>{\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.onSubmit({\r\n            id: uuidv4(),\r\n            text: this.state.text,\r\n            complete: false\r\n        });\r\n        this.setState({\r\n            text: \"\"\r\n        })\r\n    };\r\n\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n                <form onSubmit={this.handleSubmit} className=\"todo-form\">\r\n                    <input\r\n                        name=\"text\"\r\n                        value={this.state.text}\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"todo...\"\r\n                    />\r\n                    <button className=\"btn\" onClick={this.handleSubmit}>add</button>\r\n                </form>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nimport { library} from \"@fortawesome/fontawesome-svg-core\";\r\nimport {faCheck} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nlibrary.add(faCheck);\r\nlibrary.add(faTrash);\r\n\r\n\r\n\r\nexport default (props)=>(\r\n    <div className= {props.todo.complete ? \"success-thr\" : \"todo-item\"}>\r\n        <p>\r\n            {props.todo.text}\r\n        </p>\r\n\r\n        <div className=\"todo_element\">\r\n\r\n        <span onClick={props.toggleComplete} >\r\n           <FontAwesomeIcon icon=\"check\" />\r\n        </span>\r\n\r\n        <span onClick={props.onDelete} className=\"trash\">\r\n            <FontAwesomeIcon icon=\"trash\"/>\r\n        </span>\r\n        </div>\r\n    </div>\r\n);","import React from \"react\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport Todo from \"./Todo\";\r\n\r\nimport \"../App.css\";\r\n\r\nexport default class TodoList extends React.Component{\r\n    state={\r\n        todos: []\r\n    };\r\n\r\n    addTodo = (todo) => {\r\n        const newTodos = [todo, ...this.state.todos];\r\n        console.log(newTodos);\r\n        this.setState({\r\n            todos: newTodos\r\n        })\r\n    };\r\n\r\n    toggleComplete = (id) => {\r\n        this.setState({\r\n            todos: this.state.todos.map(todo => {\r\n                if (todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                       // id: todo.id,\r\n                       // text: todo.text,\r\n                        complete: !todo.complete\r\n                    }\r\n                } else {\r\n                    return todo;\r\n                }\r\n            })\r\n        })\r\n    };\r\n\r\n    handleDeleteTodo = (id) => {\r\n        this.setState({\r\n            todos: this.state.todos.filter(todo => todo.id !==id)\r\n        });\r\n    };\r\n\r\n    removeAllTodoThatAreComplete = () => {\r\n        this.setState({\r\n            todos: this.state.todos.filter(todo => !todo.complete)\r\n        });\r\n    };\r\n\r\n    render(){\r\n        return (\r\n            <React.Fragment>\r\n                <TodoForm onSubmit={this.addTodo}/>\r\n                {this.state.todos.map(todo => (\r\n                    <Todo key={todo.id}\r\n                          todo={todo}\r\n                          toggleComplete={()=>this.toggleComplete(todo.id)}\r\n                          onDelete={()=> this.handleDeleteTodo(todo.id)}\r\n                    />\r\n                ))}\r\n                <div className=\"todos-status\">\r\n                    <div>\r\n                        todos left: {this.state.todos.filter(todo => !todo.complete).length}\r\n                    </div>\r\n\r\n\r\n                    {this.state.todos.filter(todo => todo.complete).length ? (\r\n                        <div>\r\n                            <button className=\"btn\"\r\n                                onClick={this.removeAllTodoThatAreComplete}\r\n                            >\r\n                                remove all complete todos</button>\r\n                        </div>\r\n                    ): null }\r\n                </div>\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport TodoList from \"./components/Todolist\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n     <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}